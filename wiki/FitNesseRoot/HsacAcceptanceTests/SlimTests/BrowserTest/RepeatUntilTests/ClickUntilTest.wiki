This test ensures that we can keep clicking until a condition is met.

We use a mock server running to serve the HTML defined in this page.


!define HTML { {{{
<html>
<body>
<a href="FitNesseMock/2.html">link</a>
<label for="field">Counter</label>
<input id="field" value="1">
</body>
</html>}}} }


!define HTML2 { {{{
<html>
<body>
<a href="FitNesseMock/3.html">link</a>
<label for="field">Counter</label>
<input id="field" value="2">
</body>
</html>}}} }

!define HTML3 { {{{
<html>
<body>
<a href="FitNesseMock/4.html">link</a>
<label for="field">Counter</label>
<input id="field" value="3">
</body>
</html>}}} }


!define HTML4 { {{{
<html>
<body>
<a href="FitNesseMock/5.html">link</a>
<label for="field">Counter</label>
<input id="field" value="4">
</body>
</html>}}} }

!define HTML5 { {{{
<html>
<body>
<a href="FitNesseMock/6.html">link</a>
<label for="field">Counter</label>
<input id="field" value="5">
</body>
</html>}}} }


|script      |mock xml server setup|
|add response|${HTML}              |
|add response|${HTML2}             |
|add response|${HTML3}             |
|add response|${HTML4}             |
|add response|${HTML5}             |
|$url=       |get mock server url  |

|script                |browser test                            |
|open                  |$url                                    |
|seconds before timeout|1                                       |
|repeat at most        |10          |times                      |
|click                 |link        |until value of|Counter|is|3|
|check                 |repeat count|2                          |

|script|mock xml server setup|
|stop                        |
